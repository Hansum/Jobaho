{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(n); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar cheerio = require(\"cheerio\");\n\nvar axios = require(\"axios\");\n\nvar filterJobs = function filterJobs() {\n  var arr, keywords, arrKeywordsFinal, _iterator, _step, _loop;\n\n  return _regeneratorRuntime.async(function filterJobs$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(getRemainingData());\n\n        case 2:\n          arr = _context.sent;\n          keywords = [\"Associate\", \"Entry-level\", \"Junior\", \"Jr\", \"Fresh\", \"Fresh-Graduate\", \"Senior\", \"Sr\"];\n          arrKeywordsFinal = [];\n\n          if (!(arr != 0 || arr != undefined)) {\n            _context.next = 11;\n            break;\n          }\n\n          _iterator = _createForOfIteratorHelper(arr);\n\n          try {\n            _loop = function _loop() {\n              var item = _step.value;\n              var exists = keywords.some(function (res) {\n                return item.Job_Position.includes(res);\n              });\n\n              if (!exists) {\n                arrKeywordsFinal.push(item);\n              }\n            };\n\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              _loop();\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          return _context.abrupt(\"return\", arrKeywordsFinal);\n\n        case 11:\n          console.log(\"no array found to check Keywords\");\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar FinalOutput = function FinalOutput() {\n  var keyData, finalData, _iterator2, _step2, item, jobTitle, company, date, location;\n\n  return _regeneratorRuntime.async(function FinalOutput$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(filterJobs());\n\n        case 2:\n          keyData = _context2.sent;\n          finalData = [];\n\n          if (!keyData) {\n            _context2.next = 10;\n            break;\n          }\n\n          _iterator2 = _createForOfIteratorHelper(keyData);\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              item = _step2.value;\n\n              if (item.Job_Position !== undefined && item.Company_Name !== undefined && item.Job_Date !== undefined && item.Job_url !== undefined) {\n                jobTitle = item.Job_Position.trim();\n                company = item.Company_Name.trim();\n                date = item.Job_Date.trim();\n                location = item.Job_Location.trim();\n                finalData.push({\n                  Job_Position: jobTitle,\n                  Company_Name: company,\n                  Job_Location: location,\n                  Job_Date: date,\n                  Job_Url: item.Job_url\n                });\n              }\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n\n          return _context2.abrupt(\"return\", finalData);\n\n        case 10:\n          console.log(\"no array found to remove space\");\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nfunction getRemainingData() {\n  var position_title, company_name, date, job_Url, location, finalArray, url, i, _i;\n\n  return _regeneratorRuntime.async(function getRemainingData$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          position_title = [];\n          company_name = [];\n          date = [];\n          job_Url = [];\n          location = [];\n          finalArray = [];\n          url = \"https://www.cebuitjobs.com\";\n          i = 0;\n\n        case 8:\n          if (!(i !== 143)) {\n            _context3.next = 14;\n            break;\n          }\n\n          _context3.next = 11;\n          return _regeneratorRuntime.awrap(axios.get(url + \"/more/\".concat(i)).then(function (res) {\n            var $ = cheerio.load(res.data);\n            $('div[class=\"card-body\"]').each(function (index, element) {\n              if ($(element).find(\"img\").length === 1) {\n                $(element).find(\"h5\").each(function (index, job) {\n                  position_title.push($(job).text());\n                });\n                $(element).find(\"img\").each(function (index, company) {\n                  company_name.push($(company).attr(\"alt\"));\n                });\n                $(element).find(\"h6\").each(function (index, jobDate) {\n                  date.push($(jobDate).text());\n                });\n                $(element).find(\"span:first-of-type\").each(function (index, jobLocation) {\n                  location.push($(jobLocation).text());\n                });\n                $(element).find(\"h5 a\").each(function (index, url) {\n                  job_Url.push($(url).attr(\"href\"));\n                });\n              }\n            });\n          })[\"catch\"](function (err) {\n            console.log(\"Error fetching\", err);\n          }));\n\n        case 11:\n          i += 13;\n          _context3.next = 8;\n          break;\n\n        case 14:\n          for (_i = 0; _i <= position_title.length; _i++) {\n            if (position_title[_i] !== undefined && company_name[_i] !== undefined && date[_i] !== undefined && job_Url[_i] !== undefined) {\n              finalArray.push({\n                Job_Position: position_title[_i],\n                Company_Name: company_name[_i],\n                Job_Location: location[_i],\n                Job_Date: date[_i],\n                Job_url: job_Url[_i]\n              });\n            }\n          } // console.log(\"array:\", finalArray);\n\n\n          return _context3.abrupt(\"return\", axios.all(finalArray).then(function (res) {\n            return res;\n          }));\n\n        case 16:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nvar sendScrapeData = function sendScrapeData() {\n  var mid_level, length;\n  return _regeneratorRuntime.async(function sendScrapeData$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return _regeneratorRuntime.awrap(FinalOutput());\n\n        case 2:\n          mid_level = _context4.sent;\n          length = mid_level.length;\n          return _context4.abrupt(\"return\", {\n            mid_level: mid_level,\n            length: length\n          });\n\n        case 5:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nmodule.exports = sendScrapeData;","map":null,"metadata":{},"sourceType":"script"}