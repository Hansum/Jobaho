{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chris\\\\Desktop\\\\jobaho\\\\pages\\\\index.js\";\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n// import Layout from \"../components/MyLayout\";\n// import Link from \"next/link\";\n// import fetch from \"isomorphic-unfetch\";\n// const Index = props => (\n//   <Layout>\n//     <h1>Batman TV Shows</h1>\n//     <ul>\n//       {props.shows.map(show => (\n//         <li key={show.id}>\n//           <Link href=\"/p/[id]\" as={`/p/${show.id}`}>\n//             <a>{show.name}</a>\n//           </Link>\n//         </li>\n//       ))}\n//     </ul>\n//     <style jsx>{`\n//       h1,\n//       a {\n//         font-family: \"Arial\";\n//       }\n//       ul {\n//         padding: 0;\n//       }\n//       li {\n//         list-style: none;\n//         margin: 5px 0;\n//       }\n//       a {\n//         text-decoration: none;\n//         color: blue;\n//       }\n//       a:hover {\n//         opacity: 0.6;\n//       }\n//     `}</style>\n//   </Layout>\n// );\n// Index.getInitialProps = async function() {\n//   const res = await fetch(\"https://api.tvmaze.com/search/shows?q=batman\");\n//   const data = await res.json();\n//   console.log(`Show data fetched. Count: ${data.length}`);\n//   return {\n//     shows: data.map(entry => entry.show)\n//   };\n// };\n// export default Index;\n// import useSWR from \"swr\";\n// function fetcher(url) {\n//   return fetch(url).then(r => r.json());\n// }\n// export default function Index() {\n//   const { data, error } = useSWR(\"/api/randomQuote\", fetcher);\n//   // The following line has optional chaining, added in Next.js v9.1.5,\n//   // is the same as `data && data.author`\n//   const author = data?.author;\n//   let quote = data?.quote;\n//   if (!data) quote = \"Loading...\";\n//   if (error) quote = \"Failed to fetch the quote.\";\n//   return (\n//     <main className=\"center\">\n//       <div className=\"quote\">{quote}</div>\n//       {author && <span className=\"author\">- {author}</span>}\n//       <style jsx>{`\n//         main {\n//           width: 90%;\n//           max-width: 900px;\n//           margin: 300px auto;\n//           text-align: center;\n//         }\n//         .quote {\n//           font-family: cursive;\n//           color: #e243de;\n//           font-size: 24px;\n//           padding-bottom: 10px;\n//         }\n//         .author {\n//           font-family: sans-serif;\n//           color: #559834;\n//           font-size: 20px;\n//         }\n//       `}</style>\n//     </main>\n//   );\n// }\nimport { useRouter } from \"next/router\";\nimport useSWR from \"swr\";\n\nfunction fetcher(url) {\n  return fetch(url).then(r => r.json());\n}\n\nexport default function Index() {\n  const {\n    query\n  } = useRouter();\n  const {\n    data,\n    error\n  } = useSWR(`/api/randomQuote${query.author ? \"?author=\" + query.author : \"\"}`, fetcher); // The following line has optional chaining, added in Next.js v9.1.5,\n  // is the same as `data && data.author`\n\n  const author = data === null || data === void 0 ? void 0 : data.author;\n  let quote = data === null || data === void 0 ? void 0 : data.quote;\n  if (!data) quote = \"Loading...\";\n  if (error) quote = \"Failed to fetch the quote.\";\n  return __jsx(\"main\", {\n    className: \"jsx-1236022937\" + \" \" + \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"jsx-1236022937\" + \" \" + \"quote\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, quote), author && __jsx(\"span\", {\n    className: \"jsx-1236022937\" + \" \" + \"author\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, \"- \", author), __jsx(_JSXStyle, {\n    id: \"1236022937\",\n    __self: this\n  }, \"main.jsx-1236022937{width:90%;max-width:900px;margin:300px auto;text-align:center;}.quote.jsx-1236022937{font-family:cursive;color:#e243de;font-size:24px;padding-bottom:10px;}.author.jsx-1236022937{font-family:sans-serif;color:#559834;font-size:20px;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcY2hyaXNcXERlc2t0b3BcXGpvYmFob1xccGFnZXNcXGluZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQThIa0IsQUFHcUIsQUFNVSxBQU1HLFVBWFAsVUFNRixHQU1BLEdBWEksUUFNSCxHQU1BLE9BWEcsS0FNRSxHQU10QixVQVhBLE9BTUEiLCJmaWxlIjoiQzpcXFVzZXJzXFxjaHJpc1xcRGVza3RvcFxcam9iYWhvXFxwYWdlc1xcaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBpbXBvcnQgTGF5b3V0IGZyb20gXCIuLi9jb21wb25lbnRzL015TGF5b3V0XCI7XHJcbi8vIGltcG9ydCBMaW5rIGZyb20gXCJuZXh0L2xpbmtcIjtcclxuLy8gaW1wb3J0IGZldGNoIGZyb20gXCJpc29tb3JwaGljLXVuZmV0Y2hcIjtcclxuXHJcbi8vIGNvbnN0IEluZGV4ID0gcHJvcHMgPT4gKFxyXG4vLyAgIDxMYXlvdXQ+XHJcbi8vICAgICA8aDE+QmF0bWFuIFRWIFNob3dzPC9oMT5cclxuLy8gICAgIDx1bD5cclxuLy8gICAgICAge3Byb3BzLnNob3dzLm1hcChzaG93ID0+IChcclxuLy8gICAgICAgICA8bGkga2V5PXtzaG93LmlkfT5cclxuLy8gICAgICAgICAgIDxMaW5rIGhyZWY9XCIvcC9baWRdXCIgYXM9e2AvcC8ke3Nob3cuaWR9YH0+XHJcbi8vICAgICAgICAgICAgIDxhPntzaG93Lm5hbWV9PC9hPlxyXG4vLyAgICAgICAgICAgPC9MaW5rPlxyXG4vLyAgICAgICAgIDwvbGk+XHJcbi8vICAgICAgICkpfVxyXG4vLyAgICAgPC91bD5cclxuLy8gICAgIDxzdHlsZSBqc3g+e2BcclxuLy8gICAgICAgaDEsXHJcbi8vICAgICAgIGEge1xyXG4vLyAgICAgICAgIGZvbnQtZmFtaWx5OiBcIkFyaWFsXCI7XHJcbi8vICAgICAgIH1cclxuXHJcbi8vICAgICAgIHVsIHtcclxuLy8gICAgICAgICBwYWRkaW5nOiAwO1xyXG4vLyAgICAgICB9XHJcblxyXG4vLyAgICAgICBsaSB7XHJcbi8vICAgICAgICAgbGlzdC1zdHlsZTogbm9uZTtcclxuLy8gICAgICAgICBtYXJnaW46IDVweCAwO1xyXG4vLyAgICAgICB9XHJcblxyXG4vLyAgICAgICBhIHtcclxuLy8gICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XHJcbi8vICAgICAgICAgY29sb3I6IGJsdWU7XHJcbi8vICAgICAgIH1cclxuXHJcbi8vICAgICAgIGE6aG92ZXIge1xyXG4vLyAgICAgICAgIG9wYWNpdHk6IDAuNjtcclxuLy8gICAgICAgfVxyXG4vLyAgICAgYH08L3N0eWxlPlxyXG4vLyAgIDwvTGF5b3V0PlxyXG4vLyApO1xyXG5cclxuLy8gSW5kZXguZ2V0SW5pdGlhbFByb3BzID0gYXN5bmMgZnVuY3Rpb24oKSB7XHJcbi8vICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goXCJodHRwczovL2FwaS50dm1hemUuY29tL3NlYXJjaC9zaG93cz9xPWJhdG1hblwiKTtcclxuLy8gICBjb25zdCBkYXRhID0gYXdhaXQgcmVzLmpzb24oKTtcclxuXHJcbi8vICAgY29uc29sZS5sb2coYFNob3cgZGF0YSBmZXRjaGVkLiBDb3VudDogJHtkYXRhLmxlbmd0aH1gKTtcclxuXHJcbi8vICAgcmV0dXJuIHtcclxuLy8gICAgIHNob3dzOiBkYXRhLm1hcChlbnRyeSA9PiBlbnRyeS5zaG93KVxyXG4vLyAgIH07XHJcbi8vIH07XHJcblxyXG4vLyBleHBvcnQgZGVmYXVsdCBJbmRleDtcclxuXHJcbi8vIGltcG9ydCB1c2VTV1IgZnJvbSBcInN3clwiO1xyXG5cclxuLy8gZnVuY3Rpb24gZmV0Y2hlcih1cmwpIHtcclxuLy8gICByZXR1cm4gZmV0Y2godXJsKS50aGVuKHIgPT4gci5qc29uKCkpO1xyXG4vLyB9XHJcblxyXG4vLyBleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBJbmRleCgpIHtcclxuLy8gICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSB1c2VTV1IoXCIvYXBpL3JhbmRvbVF1b3RlXCIsIGZldGNoZXIpO1xyXG4vLyAgIC8vIFRoZSBmb2xsb3dpbmcgbGluZSBoYXMgb3B0aW9uYWwgY2hhaW5pbmcsIGFkZGVkIGluIE5leHQuanMgdjkuMS41LFxyXG4vLyAgIC8vIGlzIHRoZSBzYW1lIGFzIGBkYXRhICYmIGRhdGEuYXV0aG9yYFxyXG4vLyAgIGNvbnN0IGF1dGhvciA9IGRhdGE/LmF1dGhvcjtcclxuLy8gICBsZXQgcXVvdGUgPSBkYXRhPy5xdW90ZTtcclxuXHJcbi8vICAgaWYgKCFkYXRhKSBxdW90ZSA9IFwiTG9hZGluZy4uLlwiO1xyXG4vLyAgIGlmIChlcnJvcikgcXVvdGUgPSBcIkZhaWxlZCB0byBmZXRjaCB0aGUgcXVvdGUuXCI7XHJcblxyXG4vLyAgIHJldHVybiAoXHJcbi8vICAgICA8bWFpbiBjbGFzc05hbWU9XCJjZW50ZXJcIj5cclxuLy8gICAgICAgPGRpdiBjbGFzc05hbWU9XCJxdW90ZVwiPntxdW90ZX08L2Rpdj5cclxuLy8gICAgICAge2F1dGhvciAmJiA8c3BhbiBjbGFzc05hbWU9XCJhdXRob3JcIj4tIHthdXRob3J9PC9zcGFuPn1cclxuXHJcbi8vICAgICAgIDxzdHlsZSBqc3g+e2BcclxuLy8gICAgICAgICBtYWluIHtcclxuLy8gICAgICAgICAgIHdpZHRoOiA5MCU7XHJcbi8vICAgICAgICAgICBtYXgtd2lkdGg6IDkwMHB4O1xyXG4vLyAgICAgICAgICAgbWFyZ2luOiAzMDBweCBhdXRvO1xyXG4vLyAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICAucXVvdGUge1xyXG4vLyAgICAgICAgICAgZm9udC1mYW1pbHk6IGN1cnNpdmU7XHJcbi8vICAgICAgICAgICBjb2xvcjogI2UyNDNkZTtcclxuLy8gICAgICAgICAgIGZvbnQtc2l6ZTogMjRweDtcclxuLy8gICAgICAgICAgIHBhZGRpbmctYm90dG9tOiAxMHB4O1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICAuYXV0aG9yIHtcclxuLy8gICAgICAgICAgIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmO1xyXG4vLyAgICAgICAgICAgY29sb3I6ICM1NTk4MzQ7XHJcbi8vICAgICAgICAgICBmb250LXNpemU6IDIwcHg7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICBgfTwvc3R5bGU+XHJcbi8vICAgICA8L21haW4+XHJcbi8vICAgKTtcclxuLy8gfVxyXG5cclxuaW1wb3J0IHsgdXNlUm91dGVyIH0gZnJvbSBcIm5leHQvcm91dGVyXCI7XHJcbmltcG9ydCB1c2VTV1IgZnJvbSBcInN3clwiO1xyXG5cclxuZnVuY3Rpb24gZmV0Y2hlcih1cmwpIHtcclxuICByZXR1cm4gZmV0Y2godXJsKS50aGVuKHIgPT4gci5qc29uKCkpO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBJbmRleCgpIHtcclxuICBjb25zdCB7IHF1ZXJ5IH0gPSB1c2VSb3V0ZXIoKTtcclxuICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSB1c2VTV1IoXHJcbiAgICBgL2FwaS9yYW5kb21RdW90ZSR7cXVlcnkuYXV0aG9yID8gXCI/YXV0aG9yPVwiICsgcXVlcnkuYXV0aG9yIDogXCJcIn1gLFxyXG4gICAgZmV0Y2hlclxyXG4gICk7XHJcbiAgLy8gVGhlIGZvbGxvd2luZyBsaW5lIGhhcyBvcHRpb25hbCBjaGFpbmluZywgYWRkZWQgaW4gTmV4dC5qcyB2OS4xLjUsXHJcbiAgLy8gaXMgdGhlIHNhbWUgYXMgYGRhdGEgJiYgZGF0YS5hdXRob3JgXHJcbiAgY29uc3QgYXV0aG9yID0gZGF0YT8uYXV0aG9yO1xyXG4gIGxldCBxdW90ZSA9IGRhdGE/LnF1b3RlO1xyXG5cclxuICBpZiAoIWRhdGEpIHF1b3RlID0gXCJMb2FkaW5nLi4uXCI7XHJcbiAgaWYgKGVycm9yKSBxdW90ZSA9IFwiRmFpbGVkIHRvIGZldGNoIHRoZSBxdW90ZS5cIjtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxtYWluIGNsYXNzTmFtZT1cImNlbnRlclwiPlxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInF1b3RlXCI+e3F1b3RlfTwvZGl2PlxyXG4gICAgICB7YXV0aG9yICYmIDxzcGFuIGNsYXNzTmFtZT1cImF1dGhvclwiPi0ge2F1dGhvcn08L3NwYW4+fVxyXG5cclxuICAgICAgPHN0eWxlIGpzeD57YFxyXG4gICAgICAgIG1haW4ge1xyXG4gICAgICAgICAgd2lkdGg6IDkwJTtcclxuICAgICAgICAgIG1heC13aWR0aDogOTAwcHg7XHJcbiAgICAgICAgICBtYXJnaW46IDMwMHB4IGF1dG87XHJcbiAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC5xdW90ZSB7XHJcbiAgICAgICAgICBmb250LWZhbWlseTogY3Vyc2l2ZTtcclxuICAgICAgICAgIGNvbG9yOiAjZTI0M2RlO1xyXG4gICAgICAgICAgZm9udC1zaXplOiAyNHB4O1xyXG4gICAgICAgICAgcGFkZGluZy1ib3R0b206IDEwcHg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC5hdXRob3Ige1xyXG4gICAgICAgICAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XHJcbiAgICAgICAgICBjb2xvcjogIzU1OTgzNDtcclxuICAgICAgICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgICAgICB9XHJcbiAgICAgIGB9PC9zdHlsZT5cclxuICAgIDwvbWFpbj5cclxuICApO1xyXG59XHJcbiJdfQ== */\\n/*@ sourceURL=C:\\\\\\\\Users\\\\\\\\chris\\\\\\\\Desktop\\\\\\\\jobaho\\\\\\\\pages\\\\\\\\index.js */\"));\n}","map":{"version":3,"sources":["C:/Users/chris/Desktop/jobaho/pages/index.js"],"names":["useRouter","useSWR","fetcher","url","fetch","then","r","json","Index","query","data","error","author","quote"],"mappings":";;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,SAAT,QAA0B,aAA1B;AACA,OAAOC,MAAP,MAAmB,KAAnB;;AAEA,SAASC,OAAT,CAAiBC,GAAjB,EAAsB;AACpB,SAAOC,KAAK,CAACD,GAAD,CAAL,CAAWE,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACC,IAAF,EAArB,CAAP;AACD;;AAED,eAAe,SAASC,KAAT,GAAiB;AAC9B,QAAM;AAAEC,IAAAA;AAAF,MAAYT,SAAS,EAA3B;AACA,QAAM;AAAEU,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAkBV,MAAM,CAC3B,mBAAkBQ,KAAK,CAACG,MAAN,GAAe,aAAaH,KAAK,CAACG,MAAlC,GAA2C,EAAG,EADrC,EAE5BV,OAF4B,CAA9B,CAF8B,CAM9B;AACA;;AACA,QAAMU,MAAM,GAAGF,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEE,MAArB;AACA,MAAIC,KAAK,GAAGH,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEG,KAAlB;AAEA,MAAI,CAACH,IAAL,EAAWG,KAAK,GAAG,YAAR;AACX,MAAIF,KAAJ,EAAWE,KAAK,GAAG,4BAAR;AAEX,SACE;AAAA,wCAAgB,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA,wCAAe,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwBA,KAAxB,CADF,EAEGD,MAAM,IAAI;AAAA,wCAAgB,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA4BA,MAA5B,CAFb;AAAA;AAAA;AAAA,k8LADF;AA0BD","sourcesContent":["// import Layout from \"../components/MyLayout\";\r\n// import Link from \"next/link\";\r\n// import fetch from \"isomorphic-unfetch\";\r\n\r\n// const Index = props => (\r\n//   <Layout>\r\n//     <h1>Batman TV Shows</h1>\r\n//     <ul>\r\n//       {props.shows.map(show => (\r\n//         <li key={show.id}>\r\n//           <Link href=\"/p/[id]\" as={`/p/${show.id}`}>\r\n//             <a>{show.name}</a>\r\n//           </Link>\r\n//         </li>\r\n//       ))}\r\n//     </ul>\r\n//     <style jsx>{`\r\n//       h1,\r\n//       a {\r\n//         font-family: \"Arial\";\r\n//       }\r\n\r\n//       ul {\r\n//         padding: 0;\r\n//       }\r\n\r\n//       li {\r\n//         list-style: none;\r\n//         margin: 5px 0;\r\n//       }\r\n\r\n//       a {\r\n//         text-decoration: none;\r\n//         color: blue;\r\n//       }\r\n\r\n//       a:hover {\r\n//         opacity: 0.6;\r\n//       }\r\n//     `}</style>\r\n//   </Layout>\r\n// );\r\n\r\n// Index.getInitialProps = async function() {\r\n//   const res = await fetch(\"https://api.tvmaze.com/search/shows?q=batman\");\r\n//   const data = await res.json();\r\n\r\n//   console.log(`Show data fetched. Count: ${data.length}`);\r\n\r\n//   return {\r\n//     shows: data.map(entry => entry.show)\r\n//   };\r\n// };\r\n\r\n// export default Index;\r\n\r\n// import useSWR from \"swr\";\r\n\r\n// function fetcher(url) {\r\n//   return fetch(url).then(r => r.json());\r\n// }\r\n\r\n// export default function Index() {\r\n//   const { data, error } = useSWR(\"/api/randomQuote\", fetcher);\r\n//   // The following line has optional chaining, added in Next.js v9.1.5,\r\n//   // is the same as `data && data.author`\r\n//   const author = data?.author;\r\n//   let quote = data?.quote;\r\n\r\n//   if (!data) quote = \"Loading...\";\r\n//   if (error) quote = \"Failed to fetch the quote.\";\r\n\r\n//   return (\r\n//     <main className=\"center\">\r\n//       <div className=\"quote\">{quote}</div>\r\n//       {author && <span className=\"author\">- {author}</span>}\r\n\r\n//       <style jsx>{`\r\n//         main {\r\n//           width: 90%;\r\n//           max-width: 900px;\r\n//           margin: 300px auto;\r\n//           text-align: center;\r\n//         }\r\n//         .quote {\r\n//           font-family: cursive;\r\n//           color: #e243de;\r\n//           font-size: 24px;\r\n//           padding-bottom: 10px;\r\n//         }\r\n//         .author {\r\n//           font-family: sans-serif;\r\n//           color: #559834;\r\n//           font-size: 20px;\r\n//         }\r\n//       `}</style>\r\n//     </main>\r\n//   );\r\n// }\r\n\r\nimport { useRouter } from \"next/router\";\r\nimport useSWR from \"swr\";\r\n\r\nfunction fetcher(url) {\r\n  return fetch(url).then(r => r.json());\r\n}\r\n\r\nexport default function Index() {\r\n  const { query } = useRouter();\r\n  const { data, error } = useSWR(\r\n    `/api/randomQuote${query.author ? \"?author=\" + query.author : \"\"}`,\r\n    fetcher\r\n  );\r\n  // The following line has optional chaining, added in Next.js v9.1.5,\r\n  // is the same as `data && data.author`\r\n  const author = data?.author;\r\n  let quote = data?.quote;\r\n\r\n  if (!data) quote = \"Loading...\";\r\n  if (error) quote = \"Failed to fetch the quote.\";\r\n\r\n  return (\r\n    <main className=\"center\">\r\n      <div className=\"quote\">{quote}</div>\r\n      {author && <span className=\"author\">- {author}</span>}\r\n\r\n      <style jsx>{`\r\n        main {\r\n          width: 90%;\r\n          max-width: 900px;\r\n          margin: 300px auto;\r\n          text-align: center;\r\n        }\r\n        .quote {\r\n          font-family: cursive;\r\n          color: #e243de;\r\n          font-size: 24px;\r\n          padding-bottom: 10px;\r\n        }\r\n        .author {\r\n          font-family: sans-serif;\r\n          color: #559834;\r\n          font-size: 20px;\r\n        }\r\n      `}</style>\r\n    </main>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}