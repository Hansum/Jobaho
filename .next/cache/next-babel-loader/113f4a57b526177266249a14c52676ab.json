{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport useSWR from \"swr\";\nimport JobCardsLayout from \"../components/JobsectionCards\";\nimport ArticleLayout from \"../components/ArticleLayout\";\nimport fetch from \"isomorphic-unfetch\";\nimport ErrorPage from \"next/error\";\nimport { Box } from \"@chakra-ui/core\";\n\nvar fetcher = function fetcher(url) {\n  var res, data;\n  return _regeneratorRuntime.async(function fetcher$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch(url));\n\n        case 2:\n          res = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 5:\n          data = _context.sent;\n\n          if (!(res.status !== 200)) {\n            _context.next = 8;\n            break;\n          }\n\n          throw new Error(\"error\", data.message);\n\n        case 8:\n          return _context.abrupt(\"return\", data);\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default function FetchData() {\n  var _useSWR = useSWR(\"/api/job/index\", fetcher),\n      data = _useSWR.data,\n      error = _useSWR.error;\n\n  console.log(\"Data:\", data);\n  if (error) return __jsx(\"div\", null, \"Failed to load entry level api\");\n  if (!data) return __jsx(\"div\", null, \"Loading...\"); // return data.map((res, index) => {\n  //   const { job_position, company, location, url } = res;\n  //   return (\n  //     <ArticleLayout uniqueKey={index}>\n  //       <h1>{job_position}</h1>\n  //       <h2>{company}</h2>\n  //       <h2>{location}</h2>\n  //     </ArticleLayout>\n  //   );\n  // });\n  // Sample card from Airbnb\n\n  return data.map(function (res, index) {\n    var job_position = res.job_position,\n        company = res.company,\n        location = res.location,\n        url = res.url;\n    return __jsx(Box, {\n      display: \"flex\",\n      flexWrap: \"wrap\"\n    }, __jsx(Box, {\n      maxW: \"sm\",\n      borderWidth: \"1px\",\n      rounded: \"lg\",\n      overflow: \"hidden\",\n      bg: \"white\"\n    }, __jsx(Box, {\n      p: \"6\"\n    }, __jsx(Box, {\n      d: \"flex\",\n      alignItems: \"baseline\"\n    }, __jsx(Box, {\n      color: \"gray.500\",\n      fontWeight: \"semibold\",\n      letterSpacing: \"wide\",\n      fontSize: \"xs\",\n      textTransform: \"uppercase\",\n      ml: \"2\"\n    }, company)), __jsx(Box, {\n      mt: \"1\",\n      fontWeight: \"semibold\",\n      as: \"h4\",\n      lineHeight: \"tight\",\n      isTruncated: true\n    }, job_position), __jsx(Box, {\n      d: \"flex\",\n      mt: \"2\",\n      alignItems: \"center\"\n    }, __jsx(Box, {\n      as: \"span\",\n      ml: \"2\",\n      color: \"gray.600\",\n      fontSize: \"sm\"\n    }, location)))));\n  });\n} // const SampleLayout = ({ children, title }) => {\n//   return (\n//     <div className=\"centered\">\n//       <h1>{title}</h1>\n//       <section className=\"card\">{children}</section>\n//     </div>\n//   );\n// };\n// const jobPage = ({ result }) => {\n//   if (!result) {\n//     // return <ErrorPage statusCode={404}></ErrorPage>;\n//     console.log(\"Data not found\");\n//   }\n//   // return result.data.entry_level.map((res, index) => {\n//   //   const { Job_Position, Job_Company_Name, Job_Location, Job_url } = res;\n//   //   return (\n//   //     <ArticleLayout uniqueKey={index}>\n//   //       <h1>{Job_Position}</h1>\n//   //       <h2>{Job_Company_Name}</h2>\n//   //       <h2>{Job_Location}</h2>\n//   //     </ArticleLayout>\n//   //   );\n//   // });\n//   return (\n//     <SampleLayout>\n//       {result.data.entry_level.map((res, index) => {\n//         const { Job_Position, Job_Company_Name, Job_Location, Job_url } = res;\n//         <ArticleLayout uniqueKey={index}>\n//           <h1>{Job_Position}</h1>\n//           <h2>{Job_Company_Name}</h2>\n//           <h2>{Job_Location}</h2>\n//         </ArticleLayout>;\n//       })}\n//     </SampleLayout>\n//   );\n// };\n// export async function getServerSideProps({ req }) {\n//   try {\n//     const baseUrl = req ? `${req.protocol}://${req.get(\"Host\")}` : \"\";\n//     const res = await fetch(`${baseUrl}/api/jobPosition`);\n//     const result = await res.json();\n//     return {\n//       props: { result },\n//     };\n//   } catch {\n//     res.statusCode = 404;\n//     return {\n//       props: {},\n//     };\n//   }\n// }\n// export default jobPage;","map":{"version":3,"sources":["C:/Users/chris/Desktop/jobaho/pages/jobSection.js"],"names":["React","Component","useSWR","JobCardsLayout","ArticleLayout","fetch","ErrorPage","Box","fetcher","url","res","json","data","status","Error","message","FetchData","error","console","log","map","index","job_position","company","location"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport useSWR from \"swr\";\r\nimport JobCardsLayout from \"../components/JobsectionCards\";\r\nimport ArticleLayout from \"../components/ArticleLayout\";\r\nimport fetch from \"isomorphic-unfetch\";\r\nimport ErrorPage from \"next/error\";\r\nimport { Box } from \"@chakra-ui/core\";\r\n\r\nconst fetcher = async (url) => {\r\n  const res = await fetch(url);\r\n  const data = await res.json();\r\n\r\n  if (res.status !== 200) {\r\n    throw new Error(\"error\", data.message);\r\n  }\r\n  return data;\r\n};\r\n\r\nexport default function FetchData() {\r\n  const { data, error } = useSWR(\"/api/job/index\", fetcher);\r\n  console.log(\"Data:\", data);\r\n\r\n  if (error) return <div>Failed to load entry level api</div>;\r\n  if (!data) return <div>Loading...</div>;\r\n\r\n  // return data.map((res, index) => {\r\n  //   const { job_position, company, location, url } = res;\r\n  //   return (\r\n  //     <ArticleLayout uniqueKey={index}>\r\n  //       <h1>{job_position}</h1>\r\n  //       <h2>{company}</h2>\r\n  //       <h2>{location}</h2>\r\n  //     </ArticleLayout>\r\n  //   );\r\n  // });\r\n\r\n  // Sample card from Airbnb\r\n\r\n  return data.map((res, index) => {\r\n    const { job_position, company, location, url } = res;\r\n    return (\r\n      <Box display=\"flex\" flexWrap=\"wrap\">\r\n        <Box\r\n          maxW=\"sm\"\r\n          borderWidth=\"1px\"\r\n          rounded=\"lg\"\r\n          overflow=\"hidden\"\r\n          bg=\"white\"\r\n        >\r\n          <Box p=\"6\">\r\n            <Box d=\"flex\" alignItems=\"baseline\">\r\n              <Box\r\n                color=\"gray.500\"\r\n                fontWeight=\"semibold\"\r\n                letterSpacing=\"wide\"\r\n                fontSize=\"xs\"\r\n                textTransform=\"uppercase\"\r\n                ml=\"2\"\r\n              >\r\n                {company}\r\n              </Box>\r\n            </Box>\r\n\r\n            <Box\r\n              mt=\"1\"\r\n              fontWeight=\"semibold\"\r\n              as=\"h4\"\r\n              lineHeight=\"tight\"\r\n              isTruncated\r\n            >\r\n              {job_position}\r\n            </Box>\r\n\r\n            <Box d=\"flex\" mt=\"2\" alignItems=\"center\">\r\n              <Box as=\"span\" ml=\"2\" color=\"gray.600\" fontSize=\"sm\">\r\n                {location}\r\n              </Box>\r\n            </Box>\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n    );\r\n  });\r\n}\r\n\r\n// const SampleLayout = ({ children, title }) => {\r\n//   return (\r\n//     <div className=\"centered\">\r\n//       <h1>{title}</h1>\r\n//       <section className=\"card\">{children}</section>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const jobPage = ({ result }) => {\r\n//   if (!result) {\r\n//     // return <ErrorPage statusCode={404}></ErrorPage>;\r\n//     console.log(\"Data not found\");\r\n//   }\r\n\r\n//   // return result.data.entry_level.map((res, index) => {\r\n//   //   const { Job_Position, Job_Company_Name, Job_Location, Job_url } = res;\r\n//   //   return (\r\n//   //     <ArticleLayout uniqueKey={index}>\r\n//   //       <h1>{Job_Position}</h1>\r\n//   //       <h2>{Job_Company_Name}</h2>\r\n//   //       <h2>{Job_Location}</h2>\r\n//   //     </ArticleLayout>\r\n//   //   );\r\n//   // });\r\n\r\n//   return (\r\n//     <SampleLayout>\r\n//       {result.data.entry_level.map((res, index) => {\r\n//         const { Job_Position, Job_Company_Name, Job_Location, Job_url } = res;\r\n//         <ArticleLayout uniqueKey={index}>\r\n//           <h1>{Job_Position}</h1>\r\n//           <h2>{Job_Company_Name}</h2>\r\n//           <h2>{Job_Location}</h2>\r\n//         </ArticleLayout>;\r\n//       })}\r\n//     </SampleLayout>\r\n//   );\r\n// };\r\n\r\n// export async function getServerSideProps({ req }) {\r\n//   try {\r\n//     const baseUrl = req ? `${req.protocol}://${req.get(\"Host\")}` : \"\";\r\n//     const res = await fetch(`${baseUrl}/api/jobPosition`);\r\n//     const result = await res.json();\r\n\r\n//     return {\r\n//       props: { result },\r\n//     };\r\n//   } catch {\r\n//     res.statusCode = 404;\r\n//     return {\r\n//       props: {},\r\n//     };\r\n//   }\r\n// }\r\n\r\n// export default jobPage;\r\n"]},"metadata":{},"sourceType":"module"}