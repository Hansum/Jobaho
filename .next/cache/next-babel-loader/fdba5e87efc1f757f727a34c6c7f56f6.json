{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chris\\\\Desktop\\\\Jobaho\\\\pages\\\\mid.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport Router, { useRouter } from \"next/router\";\nimport useSWR from \"swr\";\nimport JobCardsLayout from \"../components/JobsectionCards\";\nimport Loader from \"../components/LoadingLayout\";\nimport fetch from \"isomorphic-unfetch\";\nimport JobCards from \"../components/CardsLayout\";\nimport { Box, Flex, Link, Text, Button, ButtonGroup } from \"@chakra-ui/core\";\n\nconst fetcher = async url => {\n  const res = await fetch(url);\n  const data = await res.json();\n\n  if (res.status !== 200) {\n    throw new Error(\"error\", data.message);\n  }\n\n  return data;\n};\n\nexport default function FetchData() {\n  const {\n    0: value,\n    1: setValue\n  } = useState(\"\");\n  const {\n    query\n  } = useRouter();\n  const {\n    data,\n    error\n  } = useSWR(`/api/midAPI${query.title ? \"?keyword=\" + query.title : \"\"}`, fetcher); // const { data, error } = useSWR(\"/api/midAPI\", fetcher);\n  // console.log(\"Data:\", data);\n\n  if (error) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 21\n    }\n  }, \"Failed to load mid api\");\n\n  if (!data) {\n    return __jsx(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 12\n      }\n    }, \"Scraping Mid Level Jobs\");\n  }\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    Router.push({\n      pathname: \"/mid\",\n      query: {\n        title: value\n      }\n    });\n  }; //BOX ----> DIV\n\n\n  return __jsx(JobCardsLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, __jsx(Text, {\n    color: \"white\",\n    m: 5,\n    textAlign: \"center\",\n    fontSize: \"30px\",\n    fontFamily: \"Sen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, \"Mid Level Jobs\"), __jsx(Text, {\n    color: \"white\",\n    m: 5,\n    textAlign: \"center\",\n    fontSize: \"20px\",\n    fontFamily: \"Sen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, \"Number of Jobs: \", data.length), __jsx(Flex, {\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, __jsx(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }, __jsx(Input, {\n    textAlign: \"center\",\n    type: \"text\",\n    size: \"lg\",\n    placeholder: \"Search job position..\",\n    value: value,\n    onChange: event => setValue(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }))), __jsx(Flex, {\n    flexWrap: \"wrap\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, data.mid_level.map((res, index) => {\n    const {\n      title,\n      company,\n      location,\n      url\n    } = res;\n    return __jsx(JobCards, {\n      title: title,\n      company: company,\n      location: location,\n      url: url,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 15\n      }\n    });\n  }))));\n}","map":{"version":3,"sources":["C:/Users/chris/Desktop/Jobaho/pages/mid.js"],"names":["React","useState","useEffect","Router","useRouter","useSWR","JobCardsLayout","Loader","fetch","JobCards","Box","Flex","Link","Text","Button","ButtonGroup","fetcher","url","res","data","json","status","Error","message","FetchData","value","setValue","query","error","title","handleSubmit","e","preventDefault","push","pathname","length","event","target","mid_level","map","index","company","location"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Router, { useRouter } from \"next/router\";\r\nimport useSWR from \"swr\";\r\nimport JobCardsLayout from \"../components/JobsectionCards\";\r\nimport Loader from \"../components/LoadingLayout\";\r\nimport fetch from \"isomorphic-unfetch\";\r\nimport JobCards from \"../components/CardsLayout\";\r\nimport { Box, Flex, Link, Text, Button, ButtonGroup } from \"@chakra-ui/core\";\r\n\r\nconst fetcher = async (url) => {\r\n  const res = await fetch(url);\r\n  const data = await res.json();\r\n\r\n  if (res.status !== 200) {\r\n    throw new Error(\"error\", data.message);\r\n  }\r\n  return data;\r\n};\r\n\r\nexport default function FetchData() {\r\n  const [value, setValue] = useState(\"\");\r\n  const { query } = useRouter();\r\n  const { data, error } = useSWR(\r\n    `/api/midAPI${query.title ? \"?keyword=\" + query.title : \"\"}`,\r\n    fetcher\r\n  );\r\n  // const { data, error } = useSWR(\"/api/midAPI\", fetcher);\r\n  // console.log(\"Data:\", data);\r\n\r\n  if (error) return <div>Failed to load mid api</div>;\r\n  if (!data) {\r\n    return <Loader>Scraping Mid Level Jobs</Loader>;\r\n  }\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    Router.push({\r\n      pathname: \"/mid\",\r\n      query: { title: value },\r\n    });\r\n  };\r\n\r\n  //BOX ----> DIV\r\n  return (\r\n    <JobCardsLayout>\r\n      <Box>\r\n        <Text\r\n          color=\"white\"\r\n          m={5}\r\n          textAlign=\"center\"\r\n          fontSize=\"30px\"\r\n          fontFamily=\"Sen\"\r\n        >\r\n          Mid Level Jobs\r\n        </Text>\r\n        <Text\r\n          color=\"white\"\r\n          m={5}\r\n          textAlign=\"center\"\r\n          fontSize=\"20px\"\r\n          fontFamily=\"Sen\"\r\n        >\r\n          Number of Jobs: {data.length}\r\n        </Text>\r\n        <Flex justifyContent=\"center\">\r\n          <form onSubmit={handleSubmit}>\r\n            <Input\r\n              textAlign=\"center\"\r\n              type=\"text\"\r\n              size=\"lg\"\r\n              placeholder=\"Search job position..\"\r\n              value={value}\r\n              onChange={(event) => setValue(event.target.value)}\r\n            ></Input>\r\n          </form>\r\n        </Flex>\r\n        <Flex flexWrap=\"wrap\" justifyContent=\"center\">\r\n          {data.mid_level.map((res, index) => {\r\n            const { title, company, location, url } = res;\r\n            return (\r\n              <JobCards\r\n                title={title}\r\n                company={company}\r\n                location={location}\r\n                url={url}\r\n              ></JobCards>\r\n            );\r\n          })}\r\n        </Flex>\r\n      </Box>\r\n    </JobCardsLayout>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}