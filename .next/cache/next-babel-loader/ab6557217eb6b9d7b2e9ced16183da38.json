{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(n); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar axios = require(\"axios\");\n\nvar fetchIndreedAPI = function fetchIndreedAPI() {\n  var arr, api;\n  return _regeneratorRuntime.async(function fetchIndreedAPI$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          arr = [];\n          api = \"https://indreed.herokuapp.com/api/jobs?q=Software%20Developer&l=Cebu&country=ph&max=30\";\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(axios.get(api).then(function (res) {\n            return res.data;\n          })[\"catch\"](function (err) {\n            console.log(\"error fetching in indreed API\");\n          }));\n\n        case 4:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar RemoveKeywords = function RemoveKeywords() {\n  var data, finalarr, keyWords, _iterator, _step, _loop;\n\n  return _regeneratorRuntime.async(function RemoveKeywords$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(fetchIndreedAPI());\n\n        case 2:\n          data = _context2.sent;\n          finalarr = [];\n          keyWords = [\"Senior\", \"Sr\", \"Manager\", \"Lead\"];\n          _iterator = _createForOfIteratorHelper(data);\n\n          try {\n            _loop = function _loop() {\n              var item = _step.value;\n              var exists = keyWords.some(function (res) {\n                return item.title.includes(res);\n              });\n\n              if (exists) {\n                finalarr.push(item);\n              }\n            };\n\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              _loop();\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          return _context2.abrupt(\"return\", finalarr);\n\n        case 8:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar sendIndreedData = function sendIndreedData() {\n  var senior_level, length;\n  return _regeneratorRuntime.async(function sendIndreedData$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(RemoveKeywords());\n\n        case 2:\n          senior_level = _context3.sent;\n          length = senior_level.length; // console.log(\"senior data:\", senior_level);\n\n          return _context3.abrupt(\"return\", {\n            senior_level: senior_level,\n            length: length\n          });\n\n        case 5:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nmodule.exports = sendIndreedData;","map":null,"metadata":{},"sourceType":"script"}